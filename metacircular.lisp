
(defun my-eval (exp env)
  (cond
    ((self-evaluating? exp) exp)
    ((variable? exp) (lookup-variable-value exp env))
    ((quoted? exp) (text-of-quotation exp))
    ((assignment? exp) (eval-assignment exp env))
    ((definition? exp) (eval-definition exp env))
    ((if? exp) (eval-if exp env))
    ((lambda? exp)
     (make-procedure (lambda-parameters exp)
                     (lambda-body exp)
                     env))
    ((begin? exp)
     (eval-sequence (begin-actions exp) env))
    ((cond? exp) (my-eval (cond->if exp) env))
    ((application? exp)
     (my-apply (my-eval (operator exp) env)
               (list-of-values (operands exp) env)))
    (t (error "Unknown expression type -- EVAL"))))

(defun my-apply (procedure arguments)
  (cond
    ((primitive-procedure? procedure)
     (apply-primitive-procedure procedure arguments))
    ((compound-procedure? procedure)
     (eval-sequence
      (procedure-body procedure)
      (extend-environment
       (procedure-parameters procedure)
       arguments
       (procedure-environment procedure))))
    (t (error "Unkonwn procedure type -- APPLY"))))

(defun list-of-values (exps env)
  (if (no-operands? exps)
      '()
      (cons (my-eval (first-operand exps) env)
            (list-of-values (rest-operands exps) env))))

(defun eval-if (exp env)
  (if (true? (my-eval (if-predicate exp) env))
      (my-eval (if-consequent exp) env)
      (my-eval (if-alternative exp) env)))



(defun eval-sequence (exps env)
  (cond
    ((last-exp? exps) (my-eval (first-exp exps) env))
    (t (progn (my-eval (first-exp exps) env)
              (eval-sequence (rest-exps exps) env)))))

(defun eval-assignment (exp env)
  (set-variable-value! (assignment-variable exp)
                       (my-eval (assignment-value exp) env)
                       env)
  'ok)

(defun eval-definition (exp env)
  (define-variable!
      (definition-variable exp)
      (my-eval (definition-value exp) env)
    env)
  'ok)

(defun self-evaluating? (exp)
  (cond
    ((numberp exp) t)
    ((stringp exp) t)
    (t nil)))

(defun variable? (exp)
  (symbolp exp))

(defun quoted? (exp)
  (tagged-list? exp 'quote))

(defun text-of-quotation (exp)
  (cadr exp))

(defun tagged-list? (exp tag)
  (if (consp exp)
      (eq (car exp) tag)
      nil))

(defun assignment? (exp)
  (tagged-list? exp 'set!))
(defun assignment-variable (exp)
  (cadr exp))
(defun assignment-value (exp)
  (caddr exp))

(defun definition? (exp)
  (tagged-list? exp 'define))
(defun definition-variable (exp)
  (if (symbolp (cadr exp))
      (cadr exp)
      (caadr exp)))
(defun definition-value (exp)
  (if (symbolp (cadr exp))
      (caddr exp)
      (make-lambda (cdadr exp)
              (cddr exp))))

(defun lambda? (exp)
  (tagged-list? exp 'lambda))
(defun lambda-parameters (exp)
  (cadr exp))
(defun lambda-body (exp)
  (cddr exp))

(defun make-lambda (parameters body)
  (cons 'lambda (cons parameters body)))

(defun if? (exp)
  (tagged-list? exp 'if))
(defun if-predicate (exp)
  (cadr exp))
(defun if-consequent (exp)
  (caddr exp))
(defun if-alternative (exp)
  (if (not (null (cdddr exp)))
      (cadddr exp)
      'false))

(defun make-if (predicate consequent alternative)
  (list 'if predicate consequent alternative))

(defun begin? (exp)
  (tagged-list? exp 'begin))
(defun begin-actions (exp)
  (cdr exp))
(defun last-exp? (seq)
  (null (cdr seq)))
(defun first-exp (seq)
  (car seq))
(defun rest-exps (seq)
  (cdr seq))

(defun sequence->exp (seq)
  (cond
    ((null seq) seq)
    ((last-exp? seq) (first-exp seq))
    (t (make-begin seq))))

(defun make-begin (seq)
  (cons 'begin seq))

(defun application? (exp)
  (consp exp))
(defun operator (exp)
  (car exp))
(defun operands (exp)
  (cdr exp))
(defun no-operands? (ops)
  (null ops))
(defun first-operand (ops)
  (car ops))
(defun rest-operands (ops)
  (cdr ops))

(defun cond? (exp)
  (tagged-list? exp 'cond))
(defun cond-clauses (exp)
  (cdr exp))
(defun cond-else-clause? (clause)
  (eq (cond-predicate clause) 'else))
(defun cond-predicate (clause)
  (car clause))
(defun cond-actions (clause)
  (cdr clause))
(defun cond->if (exp)
  (expand-clauses (cond-clauses exp)))

(defun expand-clauses (clauses)
  (if (null clauses)
      'false
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (if (cond-else-clause? first)
            (if (null rest)
                (sequence->exp (cond-actions first))
                (error "ELSE clause isn't last --"))
            (make-if (cond-predicate first)
                     (sequence->exp (cond-actions first))
                     (expand-clauses rest))))))
(defun true? (val)
  (not (eq val 'false)))

(defun make-procedure (parameters body env)
  (list 'procedure parameters body env))
(defun compound-procedure? (p)
  (tagged-list? p 'procedure))
(defun procedure-parameters (p)
  (cadr p))
(defun procedure-body (p)
  (caddr p))
(defun procedure-environment (p)
  (cadddr p))

(defun enclosing-environment (env)
  (cdr env))
(defun first-frame (env)
  (car env))
(defparameter the-empty-environment '())

(defun make-frame (variables values)
  (cons variables values))
(defun frame-variables (frame)
  (car frame))
(defun frame-values (frame)
  (cdr frame))
(defun add-binding-to-frame! (var val frame)
  (push var (car frame))
  (push val (cdr frame)))

(defun extend-environment (vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (< (length vars) (length vals))
          (error "Too many arguments supplied")
          (error "Too few arguments supplied"))))

(defun lookup-variable-value (var env)
  (labels ((scan (vars vals)
             (cond ((null vars)
                    (env-loop (enclosing-environment env)))
                   ((eq var (car vars))
                    (car vals))
                   (t (scan (cdr vars) (cdr vals)))))
           (env-loop (env)
             (if (eq env the-empty-environment)
                 (error (format nil "Unbound variable ~a" var))
                 (let ((frame (first-frame env)))
                   (scan (frame-variables frame)
                         (frame-values frame))))))
    (env-loop env)))

(defun set-variable-value! (var val env)
  (labels ((scan (vars vals)
             (cond ((null vars)
                    (env-loop (enclosing-environment env)))
                   ((eq var (car vars))
                    (setf (car vals) val))
                   (t (scan (cdr vars) (cdr vals)))))
           (env-loop (env)
             (if (eq env the-empty-environment)
                 (error (format nil "Unbound variable -- SET ~a" var))
                 (let ((frame (first-frame env)))
                   (scan (frame-variables frame)
                         (frame-values frame))))))
    (env-loop env)))

(defun define-variable! (var val env)
  (let ((frame (first-frame env)))
    (labels ((scan (vars vals)
               (cond ((null vars)
                      (add-binding-to-frame! var val frame))
                     ((eq var (car vars))
                      (setf (car vars) val))
                     (t (scan (cdr vars) (cdr vals))))))
      (scan (frame-variables frame)
            (frame-values frame)))))


(defun setup-environment ()
  (let ((initial-env
         (extend-environment (primitive-procedure-names)
                             (primitive-procedure-objects)
                             the-empty-environment)))
    (define-variable! 'true 'true initial-env)
    (define-variable! 'false 'false initial-env)
    initial-env))


(defun primitive-procedure? (proc)
  (tagged-list? proc 'primitive))
(defun primitive-implementation (proc)
  (cadr proc))
(defparameter primitive-procedures
  (list (list 'car #'car)
        (list 'cdr #'cdr)
        (list 'cons #'cons)
        (list 'null? #'null)
        (list '+ #'+)))
(defun primitive-procedure-names ()
  (mapcar #'car primitive-procedures))
(defun primitive-procedure-objects ()
  (mapcar (lambda (proc) (list 'primitive (cadr proc)))
          primitive-procedures))

(defun apply-primitive-procedure (proc args)
  (funcall (primitive-implementation proc) args))

(defparameter the-global-environment (setup-environment))


(defparameter input-prompt ";;; M-EVAL input:")
(defparameter output-prompt ";;; M-EVAL value:")
(defun driver-loop ()
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output (my-eval input the-global-environment)))
      (announce-output output-prompt)
      (user-print output)))
  (driver-loop))
(defun prompt-for-input (string)
  (format t "~&~a" string))
(defun announce-output (string)
  (format t "~&~a" string))

(defun user-print (obj)
  (if (compound-procedure? obj)
      (format t "#<COMPOUND:~a ~a>" (procedure-parameters obj)
              (procedure-body obj))
      (format t "~a" obj)))
