
(defun prime-sum-pair (list1 list2)
  (let ((a (an-element-of list1))
        (b (an-element-of list2)))
    (require-amb (prime? (+ a b)))
    (list a b)))

(defun require-amb (p)
  (if (not p)
      (amb)))

(defun an-element-of (items)
  (require-amb (not (null items)))
  (amb (car items) (an-elment-of (cdr items))))

(defun an-integer-starting-from (n)
  (amb n (an-integer-starting-from (1+ n))))

(defun an-integer-between (low high)
  (if (> low high)
      (amb)
      (amb low (an-integer-between (1+ low) high))))

(defun a-pythagorean-triple-between (low high)
  (let* ((i (an-integer-between low high))
         (j (an-integer-between i high))
         (k (an-integer-between j high)))
    (require-amb (= (+ (* i i) (* j j)) (* k k)))
    (list i j k)))


(defun multiple-dwelling ()
  (let ((baker (amb 1 2 3 4 5))
        (cooper (amb 1 2 3 4 5))
        (fletcher (amb 1 2 3 4 5))
        (miller (amb 1 2 3 4 5))
        (smith (amb 1 2 3 4 5)))
    (require-amb (distinct? (list baker cooper fletcher miller smith)))
    (require-amb (not (= baker 5)))
    (require-amb (not (= cooper 1)))
    (require-amb (not (= fletcher 5)))
    (require-amb (not (= fletcher 1)))
    (require-amb (> miller cooper))
    (require-amb (not (= (abs (- smith fletcher)) 1)))
    (require-amb (not (= (abs (- fletcher cooper)) 1)))
    (list (list 'baker baker)
          (list 'cooper cooper)
          (list 'fletcher fletcher)
          (list 'miller miller)
          (list 'smith smith))))

(defun liars ()
  (let ((bettys (amb (list 'kitty 2)
                     (list 'betty 3)))
        (ethels (amb (list 'ethel 1)
                     (list 'joan 2)))
        (joans (amb (list 'joan 3)
                    (list 'ethel 5)))
        (kittys (amb (list 'kitty 2)
                     (list 'mary 4)))
        (marys (amb (list 'mary 4)
                    (list 'betty 1))))
    (require-amb (all-statements-compatible (list bettys ethels joans kittys marys)))))

;;; probably from first to last (kitty joan betty mary ethel)

;;; name-of-father name-of-yacht name-of-daughter
(defun yacht ()
  (let ((moore (list (an-element-of name-of-daughters) 'mary))
        (downing (list (an-element-of name-of-daughters) (an-element-of name-of-daughters)))
        (hall (list (an-element-of name-of-daughters) (an-element-of name-of-daughters))))))
